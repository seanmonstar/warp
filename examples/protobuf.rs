#![deny(warnings)]

use warp::Filter;

/// ## Generated by PROST!
///
/// Check out the [prost] or [prost-build] crate to add protobuf generation
/// to your project.
///
/// [prost]: https://docs.rs/prost
/// [prost-build]: https://docs.rs/prost-build
mod user_proto {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct UserRequest {
        #[prost(string, tag = "1")]
        pub username: std::string::String,
    }
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct UserResponse {
        #[prost(uint64, tag = "1")]
        pub id: u64,
    }
}

// Don't copy this `cfg`, its only needed because this file is within
// the warp repository.
#[cfg(feature = "protobuf")]
#[tokio::main]
async fn main() {
    pretty_env_logger::init();

    let hello_user = warp::post()
        .and(warp::path("user"))
        .and(warp::body::content_length_limit(1024 * 16))
        .and(warp::body::protobuf())
        .map(|_user: user_proto::UserRequest| {
            let resp = user_proto::UserResponse { id: 42 };
            warp::reply::protobuf(&resp)
        });

    warp::serve(hello_user).run(([127, 0, 0, 1], 3030)).await

    /*  Test this with cURL, note: must have protoc installed
        $ cd <directory where warp is cloned>
        $ echo "username:'Jillian'" | \
            protoc --encode user.UserRequest "./examples/proto/user.proto" | \
            curl -sS -X POST --data-binary @- http://localhost:3030/user | \
            protoc --decode user.UserResponse "./examples/proto/user.proto"
    */
}

#[cfg(not(feature = "protobuf"))]
fn main() {
    eprintln!("Requires the `protobuf` feature.");
}
